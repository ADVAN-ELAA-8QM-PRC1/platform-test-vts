/*
 * Copyright 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "FuzzerCodeGenBase.h"

#include <iostream>

using std::cerr;
using std::cout;
using std::endl;
using std::string;

namespace android {
namespace vts {

void FuzzerCodeGenBase::GenerateAll() {
  // Generate one source file per API function.
  for (const auto &func_spec : comp_spec_.interface().api()) {
    // Don't fuzz functions with no arguments.
    if (func_spec.arg_size() == 0) {
      continue;
    }

    string output_cpp_file =
        output_dir_ + "/" + GetFuzzerSourceName(func_spec) + ".cpp";
    FILE *source_file = fopen(output_cpp_file.c_str(), "w");
    if (source_file == NULL) {
      cerr << __PRETTY_FUNCTION__ << " could not open file" << output_cpp_file
           << endl;
      exit(-1);
    }
    Formatter source_out(source_file);
    GenerateSourceFile(source_out, func_spec);
  }

  // Generate Android.bp file.
  string output_build_file = output_dir_ + "/" + "Android.bp";
  FILE *build_file = fopen(output_build_file.c_str(), "w");
  if (build_file == NULL) {
    cerr << "could not open file " << output_build_file << endl;
    exit(-1);
  }
  Formatter build_out(build_file);
  GenerateBuildFile(build_out);
}

void FuzzerCodeGenBase::GenerateSourceFile(
    Formatter &out, const FunctionSpecificationMessage &func_spec) {
  GenerateWarningComment(out);
  GenerateSourceIncludeFiles(out);
  GenerateUsingDeclaration(out);
  GenerateReturnCallback(out, func_spec);
  GenerateOpenNameSpaces(out);
  GenerateLLVMFuzzerTestOneInput(out, func_spec);
  GenerateCloseNameSpaces(out);
}

void FuzzerCodeGenBase::GenerateOpenNameSpaces(Formatter &out) {
  out << "namespace android {\n";
  out << "namespace vts {\n\n";
}

void FuzzerCodeGenBase::GenerateCloseNameSpaces(Formatter &out) {
  out << "}  // namespace vts\n";
  out << "}  // namespace android\n";
}

void FuzzerCodeGenBase::GenerateWarningComment(Formatter &out) {
  out << "// This file was auto-generated by VTS compiler.\n\n";
}

}  // namespace vts
}  // namespace android

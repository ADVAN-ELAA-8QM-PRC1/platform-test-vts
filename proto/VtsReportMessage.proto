// Copyright 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package android.vts;
option java_package = "com.google.android.vts.proto";
option java_outer_classname = "VtsReportMessage";


// To specify test case execution result.
enum TestCaseResult {
  UNKNOWN_RESULT = 0;
  TEST_CASE_RESULT_PASS = 1;
  TEST_CASE_RESULT_FAIL = 2;
  TEST_CASE_RESULT_SKIP = 3;
  TEST_CASE_RESULT_EXCEPTION = 4;
  TEST_CASE_RESULT_TIMEOUT = 5;
}


// To specify the VTS test type.
enum VtsTestType {
  UNKNOWN_VTS_TESTTYPE = 0;
  VTS_HOST_DRIVEN_STRUCTURAL = 1;
  VTS_HOST_DRIVEN_FUZZING = 2;
  VTS_TARGET_SIDE_GTEST = 3;
  VTS_TARGET_SIDE_FUZZING = 4;
}


// To specify a call flow event.
message AndroidDeviceInfoMessage {
  // product type (e.g., bullhead).
  optional bytes product_type = 1;

  // product type variant (e.g., still bullhead or another name).
  optional bytes product_variant = 2;

  // build type (e.g., userdebug).
  optional bytes build_flavor = 11;

  // Android Build ID.
  optional bytes build_id = 12;

  // branch name (e.g., master or nyc-dev).
  optional bytes branch = 21;

  // build alias implies the branch name.
  optional bytes build_alias = 22;

  // API level
  optional bytes api_level = 31;

  // Device USB serial number
  optional bytes serial = 101;
}


// To specify build info.
message AndroidBuildInfo {
  // build ID.
  optional bytes id = 1;

  // device name (e.g., bullhead).
  optional bytes name = 11;

  // build type (e.g., userdebug)
  optional bytes build_type = 12;

  // branch name (e.g., master or nyc-dev)
  optional bytes branch = 13;
}


// To specify a test case execution report.
message TestCaseReportMessage {
  // the test case name.
  optional bytes name = 1;

  // the test result.
  optional TestCaseResult test_result = 11;

  // execution start and end time stamp.
  optional int64 start_timestamp = 21;
  optional int64 end_timestamp = 22;

  // coverage report per file
  repeated CoverageReportMessage coverage = 31;
}


// To specify a profiling report.
message ProfilingReportMessage {
  // the instrumentation point name.
  optional bytes name = 1;

  // profiling start and end time stamp (for performance).
  optional int64 start_timestamp = 11;
  optional int64 end_timestamp = 12;
}


// To specify a coverage report.
message CoverageReportMessage {
  // the directory path of a source file.
  optional bytes dir_path = 1;

  // the name of the source file.
  optional bytes file_name = 2;

  // produced html report.
  optional bytes html = 3;

  // the source file content.
  optional bytes source_code = 11;

  // gcov produced data files.
  optional bytes gcno = 21;
  optional bytes gcda = 22;

  // measured coverage data.
  repeated bytes data = 31;
  // generated gcov data file.
  optional bytes gcov = 32;
}


// To specify a test execution report.
message TestReportMessage {
  // the test suite name..
  optional bytes test_suite = 1;

  // the test name.
  optional bytes test = 2;

  // the test type
  optional VtsTestType test_type = 3;

  // target device info
  repeated AndroidDeviceInfoMessage device_info = 4;

  // build info
  optional AndroidBuildInfo build_info = 5;

  // test case reports
  repeated TestCaseReportMessage test_case = 11;

  // profiling reports
  repeated ProfilingReportMessage profiling = 21;

  // execution start and end time stamp.
  optional int64 start_timestamp = 101;
  optional int64 end_timestamp = 102;
}


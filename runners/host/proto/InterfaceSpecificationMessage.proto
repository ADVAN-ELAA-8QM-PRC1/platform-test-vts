// Copyright 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package android.vts;


// Class of a target component.
enum ComponentClass {
  UNKNOWN_CLASS = 0;
  // For a HAL shared library.
  HAL = 1;
  // For a shared library which is not a HAL (e.g., standard library).
  SHAREDLIB = 2;
  // For a HAL which uses HIDL (HAL Interface Definition Language).
  HAL_HIDL = 3;
  // For a submodule of a shared library HAL .
  HAL_SUBMODULE = 4;
  // For the legacy HAL.
  LEGACY_HAL = 5;
}


// Type of a target component.
enum ComponentType {
  UNKNOWN_TYPE = 0;
  // For an audio submodule.
  AUDIO = 1;
  // For a camera submodule.
  CAMERA = 2;
  // For a GPS submodule.
  GPS = 3;
  // For a Lights sensor submodule.
  LIGHT = 4;
  // For a WiFi submodule.
  WIFI = 5;
}


// To specify a call flow event.
message CallFlowSpecificationMessage {
  // true if for a function call event.
  optional bool entry = 1 [default = false];
  // true if for an exit event from a function.
  optional bool exit = 2 [default = false];
  // a list of functions that can be called right after this event.
  repeated bytes next = 11;
  // a list of functions that can be called right before this event.
  repeated bytes prev = 12;
}


// To specify a function.
message FunctionSpecificationMessage {
  // the function name.
  optional bytes name = 1;

  // data type of the return value (for legacy HALs and shared libraries).
  optional ArgumentSpecificationMessage return_type = 11;

  // data type of the return value (for HIDL HALs).
  repeated ArgumentSpecificationMessage return_type_hidl = 12;

  // a list of arguments.
  repeated ArgumentSpecificationMessage arg = 21;

  // a specification of the call flows of the function.
  repeated CallFlowSpecificationMessage callflow = 31;

  // profiling data.
  repeated float profiling_data = 101;

  // coverage measurement data.
  repeated uint32 coverage_data = 201;

  // not a user-provided variable. used by the frameworks to tell the sub
  // struct hierarchy.
  optional bytes parent_path = 301;
}


message PrimitiveDataValueMessage {
  optional int32 int32_t = 1;
  optional uint32 uint32_t = 2;
  optional float float_t = 3;
  optional double double_t = 4;
  optional bytes bytes = 5;
  optional uint32 pointer = 6;

  optional int32 int8_t = 7;
  optional uint32 uint8_t = 8;
  optional int32 char = 9;
  optional int32 int16_t = 10;
  optional uint32 uint16_t = 11;
  optional int64 int64_t = 12;
  optional uint64 uint64_t = 13;
  optional bytes string = 14;
}


// To specify a function argument.
message ArgumentSpecificationMessage {
  // Data type of the argument to describe the corresponding C/C++ data type.
  // only one is set if the argument is a primitive data.
  repeated bytes primitive_type = 1;
  // Instance type of the argument to describe the semantic information.
  repeated bytes aggregate_type = 2;

  // true if the argument is an input (valid only for the top-level message).
  optional bool is_input = 11 [default = true];
  // true if the argument is an output.
  optional bool is_output = 12 [default = false];
  // true if the argument is a constant variable.
  optional bool is_const = 13 [default = false];

  // the actual values.
  repeated PrimitiveDataValueMessage primitive_value = 21;
  // the actual value(s) for an aggregated data type.
  repeated ArgumentSpecificationMessage aggregate_value = 22;

  // the variable names of defined primitive type attributes.
  repeated bytes primitive_name = 31;
  // the variable names of defined aggregate type attributes.
  repeated bytes aggregate_name = 32;
}


// TO specify a sub-structure.
message StructSpecificationMessage {
  // the sub-structure's variable name in its parent data structure.
  optional bytes name = 1;

  // whether itself a pointer varaible in its parent data structure.
  optional bool is_pointer = 2 [default = false];

  // a list of functions contained in the struct.
  repeated FunctionSpecificationMessage api = 1001;

  // a list of structures contained in the component.
  repeated StructSpecificationMessage sub_struct = 2001;
}


// To specify an interface of a component
message InterfaceSpecificationMessage {
  // Class, type, and version of a target component.
  optional ComponentClass component_class = 1;
  optional ComponentType component_type = 2;
  optional float component_type_version = 3 [default = 1.0];

  // The name of original C/C++ data structure.
  optional bytes original_data_structure_name = 1001;

  // a list of headers that need to be imported in order to use the component.
  repeated bytes header = 1002;

  // a list of functions exposed by the component.
  repeated FunctionSpecificationMessage api = 2001;

  // the names of custom-defined aggregate types.
  repeated bytes aggregate_type_name = 3001;
  // The actual definitions of custom-defined aggregate types.
  repeated ArgumentSpecificationMessage aggregate_type_definition = 3002;

  // a list of structures contained in the component.
  repeated StructSpecificationMessage sub_struct = 4001;
}

// Copyright 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package android.vts;


// Class of a target component.
enum ComponentClass {
  UNKNOWN_CLASS = 0;
  // For a HAL shared library.
  HAL_CONVENTIONAL = 1;
  // For a shared library which is not a HAL (e.g., standard library).
  SHAREDLIB = 2;
  // For a HAL which uses HIDL (HAL Interface Definition Language).
  HAL_HIDL = 3;
  // For a submodule of a shared library HAL .
  HAL_SUBMODULE = 4;
  // For the legacy HAL.
  HAL_LEGACY = 5;
}


// Type of a target component.
enum ComponentType {
  UNKNOWN_TYPE = 0;
  // For an audio submodule.
  AUDIO = 1;
  // For a camera submodule.
  CAMERA = 2;
  // For a GPS submodule.
  GPS = 3;
  // For a Lights sensor submodule.
  LIGHT = 4;
  // For a WiFi submodule.
  WIFI = 5;
  // For a mobile networking submodule.
  MOBILE = 6;
  // For a WiFi submodule.
  BLUETOOTH = 7;
  // For a NFC submodule
  NFC = 8;
}


// Type of a variable.
enum VariableType {
  UNKNOWN_VARIABLE_TYPE = 0;
  TYPE_SCALAR = 1;
  TYPE_STRING = 2;
  TYPE_ENUM = 3;
  TYPE_VECTOR_FIXED = 4;
  TYPE_VECTOR_VARIABLE = 5;
  TYPE_STRUCT = 6;
}


// To specify a call flow event.
message CallFlowSpecificationMessage {
  // true if for a function call event.
  optional bool entry = 1 [default = false];
  // true if for an exit event from a function.
  optional bool exit = 2 [default = false];
  // a list of functions that can be called right after this event.
  repeated bytes next = 11;
  // a list of functions that can be called right before this event.
  repeated bytes prev = 12;
}


// To specify a function.
message FunctionSpecificationMessage {
  // the function name.
  optional bytes name = 1;

  // data type of the return value (for legacy HALs and shared libraries).
  optional VariableSpecificationMessage return_type = 11;

  // data type of the return value (for HIDL HALs).
  repeated VariableSpecificationMessage return_type_hidl = 12;

  // a list of arguments.
  repeated VariableSpecificationMessage arg = 21;

  // a specification of the call flows of the function.
  repeated CallFlowSpecificationMessage callflow = 31;

  // profiling data.
  repeated float profiling_data = 101;

  // coverage measurement data.
  repeated uint32 coverage_data = 201;

  // not a user-provided variable. used by the frameworks to tell the sub
  // struct hierarchy.
  optional bytes parent_path = 301;
}


// To keep the value of a scalar variable.
message ScalarDataValueMessage {
  optional int32 bool = 1;

  optional int32 int8_t = 11;
  optional uint32 uint8_t = 12;

  optional int32 char = 13;
  optional uint32 uchar = 14;

  optional int32 int16_t = 21;
  optional uint32 uint16_t = 22;

  optional int32 int32_t = 31;
  optional uint32 uint32_t = 32;

  optional int64 int64_t = 41;
  optional uint64 uint64_t = 42;

  optional float float_t = 101;
  optional double double_t = 102;

  optional uint32 pointer = 201;
  optional uint32 opaque = 202;

  // for scalar attributes in a union data structure,
  // to specify the number of used bits.
  optional uint32 bits = 1001;
}


// To keep the value of a vector variable.
message VectorDataValueMessage {
  // set in advance if the type is a fixed-length vector.
  optional uint32 value_size = 1;

  // when it's for a scalar vector.
  optional bytes scalar_type_name = 11;
  repeated ScalarDataValueMessage value = 12;
}


// To keep the value of a string variable.
message StringDataValueMessage {
  // for actual contents.
  optional bytes bytes = 1;

  // for length in bytes, and usually not required.
  optional uint32 length = 11;
}


// To keep the value of an enum type variable.
message EnumDataValueMessage {
  // for enum type name.
  optional bytes type_name = 1;

  // for the enumerator names.
  repeated bytes enumerator = 11;

  // for the corresponding values.
  repeated uint32 value = 21;
}


// To specify a function argument or an attribute in general.
message VariableSpecificationMessage {
  // the variable name. empty if for a type definition.
  optional bytes name = 1;

  // the variable type which is one of:
  //     TYPE_SCALAR, TYPE_STRING, TYPE_ENUM, TYPE_VECTOR_FIXED,
  //     TYPE_VECTOR_VARIABLE, TYPE_STRUCT, TYPE_UNION
  //
  // not yet supported:
  //     "template", "typedef", "handle", "binder", "parcelable".
  optional VariableType type = 2;

  // the actual value(s) for an scalar data type.
  // repeated values for a vector.
  optional ScalarDataValueMessage scalar_value = 101;

  optional StringDataValueMessage string_value = 111;

  optional EnumDataValueMessage enum_value = 121;

  repeated VectorDataValueMessage vector_value = 131;

  // for sub variables when this's a struct type.
  repeated VariableSpecificationMessage struct_value = 141;

  // for sub variables when this's a union type.
  repeated VariableSpecificationMessage union_value = 151;

  // true if the argument is an input (valid only for the top-level message).
  optional bool is_input = 301 [default = true];
  // true if the argument is an output.
  optional bool is_output = 302 [default = false];
  // true if the argument is a constant variable.
  optional bool is_const = 303 [default = false];
  // true if the argument is a struct with one or multiple function pointers.
  optional bool is_callback = 304 [default = false];
}


// To specify a sub-structure.
message StructSpecificationMessage {
  // the sub-structure's variable name in its parent data structure.
  optional bytes name = 1;

  // whether itself a pointer varaible in its parent data structure.
  optional bool is_pointer = 2 [default = false];

  // a list of functions contained in the struct.
  repeated FunctionSpecificationMessage api = 1001;

  // a list of structures contained in the component.
  repeated StructSpecificationMessage sub_struct = 2001;
}


// To specify an interface of a component
message InterfaceSpecificationMessage {
  // Class, type, and version of a target component.
  optional ComponentClass component_class = 1;
  optional ComponentType component_type = 2;
  optional float component_type_version = 3 [default = 1.0];
  // The name of a target component (used for HIDL HALs).
  optional bytes component_name = 4;

  // The package path of a target component (e.g., android.hardware.name).
  // name implies the component_type field.
  optional bytes package = 11;

  // The modules to import (e.g., package_path.component_name).
  repeated bytes import = 12;

  // The name of original C/C++ data structure
  // (used for conventional and legacy HALs).
  optional bytes original_data_structure_name = 1001;

  // a list of headers that need to be imported in order to use the component.
  repeated bytes header = 1002;

  // a list of functions exposed by the component.
  repeated FunctionSpecificationMessage api = 2001;

  // The definitions of custom-defined aggregate types.
  repeated VariableSpecificationMessage attribute = 3001;

  // a list of structures contained in the component.
  repeated StructSpecificationMessage sub_struct = 4001;
}
